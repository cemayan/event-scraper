// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: protos/event.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventgRPCServiceClient is the client API for EventgRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventgRPCServiceClient interface {
	SendEvent(ctx context.Context, opts ...grpc.CallOption) (EventgRPCService_SendEventClient, error)
}

type eventgRPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventgRPCServiceClient(cc grpc.ClientConnInterface) EventgRPCServiceClient {
	return &eventgRPCServiceClient{cc}
}

func (c *eventgRPCServiceClient) SendEvent(ctx context.Context, opts ...grpc.CallOption) (EventgRPCService_SendEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventgRPCService_ServiceDesc.Streams[0], "/protos.EventgRPCService/SendEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventgRPCServiceSendEventClient{stream}
	return x, nil
}

type EventgRPCService_SendEventClient interface {
	Send(*Event) error
	CloseAndRecv() (*Event, error)
	grpc.ClientStream
}

type eventgRPCServiceSendEventClient struct {
	grpc.ClientStream
}

func (x *eventgRPCServiceSendEventClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventgRPCServiceSendEventClient) CloseAndRecv() (*Event, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventgRPCServiceServer is the server API for EventgRPCService service.
// All implementations must embed UnimplementedEventgRPCServiceServer
// for forward compatibility
type EventgRPCServiceServer interface {
	SendEvent(EventgRPCService_SendEventServer) error
	mustEmbedUnimplementedEventgRPCServiceServer()
}

// UnimplementedEventgRPCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventgRPCServiceServer struct {
}

func (UnimplementedEventgRPCServiceServer) SendEvent(EventgRPCService_SendEventServer) error {
	return status.Errorf(codes.Unimplemented, "method SendEvent not implemented")
}
func (UnimplementedEventgRPCServiceServer) mustEmbedUnimplementedEventgRPCServiceServer() {}

// UnsafeEventgRPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventgRPCServiceServer will
// result in compilation errors.
type UnsafeEventgRPCServiceServer interface {
	mustEmbedUnimplementedEventgRPCServiceServer()
}

func RegisterEventgRPCServiceServer(s grpc.ServiceRegistrar, srv EventgRPCServiceServer) {
	s.RegisterService(&EventgRPCService_ServiceDesc, srv)
}

func _EventgRPCService_SendEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventgRPCServiceServer).SendEvent(&eventgRPCServiceSendEventServer{stream})
}

type EventgRPCService_SendEventServer interface {
	SendAndClose(*Event) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type eventgRPCServiceSendEventServer struct {
	grpc.ServerStream
}

func (x *eventgRPCServiceSendEventServer) SendAndClose(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventgRPCServiceSendEventServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventgRPCService_ServiceDesc is the grpc.ServiceDesc for EventgRPCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventgRPCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.EventgRPCService",
	HandlerType: (*EventgRPCServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendEvent",
			Handler:       _EventgRPCService_SendEvent_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protos/event.proto",
}
